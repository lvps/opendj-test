---
- hosts: all
  become: false
  vars:
    version: "4.3.3"
    # taken from https://github.com/OpenIdentityPlatform/OpenDJ/blob/master/opendj-packages/opendj-docker/Dockerfile
    SECRET_VOLUME: "/var/secrets/opendj"

  tasks:
  - name: install Java 8 (OpenJDK)
    yum: name=java-1.8.0-openjdk state=installed

  - name: add user 'opendj'
    become: true
    user:
      name: opendj
      comment: OpenDJ
      system: true
      create_home: true

  - name: "download OpenDJ {{ version }}"
    become: true
    get_url:
      url: https://github.com/OpenIdentityPlatform/OpenDJ/releases/download/{{version}}/opendj-{{version}}-1.noarch.rpm
      dest: /root/opendj-{{version}}-1.noarch.rpm
      mode: 0400

  - name: install OpenDJ from local rpm
    become: true
    yum:
      name: /root/opendj-{{version}}-1.noarch.rpm
      state: present

  # From here onward, this is a rewrite of the run.sh file that installs OpenDJ
  # in a Docker container:
  # https://github.com/OpenIdentityPlatform/OpenDJ/blob/master/opendj-packages/opendj-docker/run.sh

  - name: check if old data folder exits
    stat:
      path: /opt/opendj/db
    register: opt_opendj_db

  - set_fact:
      opendj_old_data_folder_exists: opt_opendj_db.stat.exists and opt_opendj_db.stat.isdir

  - name: create new default data folder (unless one already exists)
    file:
      path: /src/www
      state: directory
    when: not opendj_old_data_folder_exists

  - name: use new data folder (unless one already exists)
    copy:
      content: '/opt/opendj/data'
      dest: /opt/opendj/instance.loc
      owner: root
      group: root
      mode: 0664
    when: not opendj_old_data_folder_exists

  - name: check if instance directory exists
    become: true
    stat:
      path: /opt/opendj/data/config
    register: opt_opendj_data_config

  - set_fact:
      opendj_instance_exists: "{{ opt_opendj_data_config.stat.exists and opt_opendj_data_config.stat.isdir }}"

  - name: create bootstrap directory
    become: true
    file:
      path: /opt/opendj/bootstrap
      state: directory
      owner: root
      group: root
      mode: 0775
    when: not opendj_instance_exists

  - name: copy setup.sh
    become: true
    template:
      src: setup.sh.j2
      dest: /opt/opendj/bootstrap/setup.sh
      owner: root
      group: root
      mode: 0775
    when: not opendj_instance_exists

  - name: run setup.sh
    become: true
    shell: /opt/opendj/bootstrap/setup.sh
    args:
      chdir: /opt/opendj
    environment:
      # taken from https://github.com/OpenIdentityPlatform/OpenDJ/blob/master/opendj-packages/opendj-docker/Dockerfile
      ADD_BASE_ENTRY: "--addBaseEntry"
      PORT: 1389
      LDAPS_PORT: 1636
      BASE_DN: "dc=example,dc=com"
      ROOT_USER_DN: "cn=Directory Manager"
      ROOT_PASSWORD: "password"
      MASTER_SERVER: ""
      OPENDJ_REPLICATION_TYPE: ""
      OPENDJ_USER: "opendj"
    when: not opendj_instance_exists

  # TODO: replication

  - name: run upgrade (if previous instance exists)
    command: /opt/opendj/upgrade -n
    args:
      chdir: /opt/opendj
    when: opendj_instance_exists

  - name: check if secrets directory exists
    stat:
      path: "{{ SECRET_VOLUME }}"
    register: opendj_secret_dir

  - set_fact:
      opendj_secret_dir_exists: "{{ opendj_secret_dir.stat.exists and opendj_secret_dir.stat.isdir }}"

  # This exectution path in run.sh terminates with "exec ./bin/start-ds --nodetach",
  # so everything below this point is "when: not opendj_instance_exists"

  - name: find keystores and truststore
    find:
      paths: "{{ SECRET_VOLUME }}"
      patterns: "key*,trust*"
    register: tmp_secrets
    when: not opendj_instance_exists and opendj_secret_dir_exists

  - name: copy keystores and truststore
    copy:
      src: "{{ item.path }}"
      dst: /opt/opendj/data/config
    with_items:
      - "{{ tmp_secrets.files }}"
    when: not opendj_instance_exists and opendj_secret_dir_exists

  - service_facts:
    become: true
    register: services_state

  # Why does run.sh do that? Can we merge the two "run upgrade" tasks here, without conditions?

  - set_fact:
      opendj_running: services_state.ansible_facts.services['opendj.service'].state == "running"

  - name: run upgrade (if previous instance does not exists)
    command: /opt/opendj/upgrade -n
    args:
      chdir: /opt/opendj
    when: not opendj_instance_exists and not opendj_running

  # End of run.sh rewrite

  - name: restart OpenDJ
    become: true
    service:
      name: opendj
      state: restarted
    when: opendj_running

  - name: start and \enable OpenDJ
    become: true
    service:
      name: opendj
      state: started
      enabled: yes

  handlers:
  - name: Systemctl daemon-reload
    command: systemctl daemon-reload
